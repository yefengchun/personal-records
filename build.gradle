allprojects {
	version = '1.0'
	group = 'com.pr'
}

subprojects {
	apply plugin: 'java'
	sourceCompatibility = 1.8
	// Make sure transitive project dependencies are resolved
	configurations.compile.transitive = true

	repositories {
		mavenLocal()
		//maven {url "https://maven.aliyun.com/central"}
		//maven {url "https://maven.aliyun.com/jcenter"}
		//maven {url "https://maven.aliyun.com/spring"}
		//maven {url "https://maven.aliyun.com/public"}
		mavenCentral()
		maven { url "http://repo.spring.io/libs-release" }
		jcenter()
	}


	configurations {
		all*.exclude group: "commons-logging", module: "commons-logging"
	}
}

//We define versions for the libraries we will be using
ext {
	springVersion = '4.2.6.RELEASE'
	springJpaVersion = '1.10.1.RELEASE'
	springSecurityVersion = '4.1.0.RELEASE'
	springBootVersion = '1.3.5.RELEASE'
	webflowVersion = '2.4.2.RELEASE'
	junitVersion = '4.12'
	mockitoVersion = '1.10.19'
	slf4jVersion = '1.7.21'
	tomcatVersion = '8.0.35'
	aspectjVersion = '1.8.9'
	jodaVersion = '2.9.4'
	tilesVersion = '3.0.5'
	hibernateVersion = '4.3.11.Final'
	h2Version = '1.4.192'
	logbackVersion = '1.1.7'
	poiVersion = '3.14'
	jacksonVersion = '2.7.4'

	//we group libraries by their purpose so we can import them easier in the modules
	boot = [
			springBootPlugin: "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion",
			starterWeb      : "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
			starterJetty    : "org.springframework.boot:spring-boot-starter-jetty:$springBootVersion",
			starterSecurity : "org.springframework.boot:spring-boot-starter-security:$springBootVersion",
			starterJpa      : "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion",
			actuator        : "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion",
			yaml            : "org.yaml:snakeyaml:1.16"
	]

	log = [
			slf4jApi  : "org.slf4j:slf4j-api:$slf4jVersion",
			slf4jJcl  : "org.slf4j:jcl-over-slf4j:$slf4jVersion",
			logback   : "ch.qos.logback:logback-classic:$logbackVersion",
			slf4jLog4j: "org.slf4j:log4j-over-slf4j:$slf4jVersion"
	]

	misc = [
			h2                : "com.h2database:h2:$h2Version",
			joda              : "joda-time:joda-time:$jodaVersion",
			dbcp              : "org.apache.openejb:commons-dbcp-all:1.3",
			jstl              : "javax.servlet:jstl:1.2",
			tilesJsp          : "org.apache.tiles:tiles-jsp:$tilesVersion",
			tilesReqApi       : "org.apache.tiles:tiles-request-api:1.0.6",
			javaxEl           : "javax.el:javax.el-api:3.0.0",
			poi               : "org.apache.poi:poi:${poiVersion}",
			jacksonCore       : "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
			jacksonDatabind   : "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
			jacksonAnnotations: "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}",
			portlet           : "javax.portlet:portlet-api:2.0",
			standard          : "taglibs:standard:1.1.2",
			servlet           : "javax.servlet:javax.servlet-api:3.1.0",
			liferayService    : "com.liferay.portal:portal-service:6.2.5",
			xmlapis           : "xml-apis:xml-apis:1.4.01",
			javaEl            : "javax.el:javax.el-api:2.2.4"
	]

	tests = [
			junit       : "junit:junit:$junitVersion",
			mockito     : "org.mockito:mockito-all:$mockitoVersion",
			hamcrestCore: "org.hamcrest:hamcrest-core:1.3",
			hamcrestLib : "org.hamcrest:hamcrest-library:1.3"
	]

	hibernate = [
			validator: "org.hibernate:hibernate-validator:5.2.4.Final",
			ehcache  : "org.hibernate:hibernate-ehcache:$hibernateVersion",
			em       : "org.hibernate:hibernate-entitymanager:$hibernateVersion",
			core     : "org.hibernate:hibernate-core:$hibernateVersion",
	]

	spring = [
			data           : "org.springframework.data:spring-data-jpa:$springJpaVersion",
			test           : "org.springframework:spring-test:$springVersion",
			webmvc         : "org.springframework:spring-webmvc:$springVersion",
			webflow        : "org.springframework.webflow:spring-webflow:$webflowVersion",
			aop            : "org.springframework:spring-aop:$springVersion",
			jdbc           : "org.springframework:spring-jdbc:$springVersion",
			orm            : "org.springframework:spring-orm:$springVersion",
			mvcPortlet     : "org.springframework:spring-webmvc-portlet:$springVersion",
			contextSupport : "org.springframework:spring-context-support:$springVersion",
			securityWeb    : "org.springframework.security:spring-security-web:$springSecurityVersion",
			securityTaglibs: "org.springframework.security:spring-security-taglibs:$springSecurityVersion",
			securityConfig : "org.springframework.security:spring-security-config:$springSecurityVersion",
			hateoas        : "org.springframework.hateoas:spring-hateoas:0.20.0.RELEASE",
			plugin         : "org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE"
	]

}

//task allCompile << {
task allCompile {
	doLast {
		description 'Task used to compile all modules in the project without running tests'
		subprojects.each { p ->
			p.getTasksByName("clean", true).each { t ->
				println "-> $p.name [CLEAN]"
				t.execute()
			}
			p.getTasksByName("compileJava", true).each { t ->
				println "-> $p.name [COMPILE]"
				t.execute()
			}
			p.getTasksByName("classes", true).each { t ->
				println "-> $p.name [CLASSES]"
				t.execute()
			}
			p.getTasksByName("jar", true).each { t ->
				println "-> $p.name [JAR]"
				t.execute()
			}
		}
	}
}

//task allDeps << {
task allDeps{
	doLast {
		description 'Task used to display dependencies for all modules in the project'
		subprojects.each { p ->
			println()
			println " $p.name ".center(60, '*')
			println()
			p.configurations.all.findAll { !it.allDependencies.empty }.each { c ->
				println " ${c.name} ".center(60, '-')
				c.allDependencies.each { dep ->
					println "$dep.group:$dep.name:$dep.version"
				}
				println "-" * 60
			}
		}
	}
}

task wrapper(type: Wrapper) {
	//gradleVersion = '2.13'
	gradleVersion = '4.7'
}
